##############################################################################
#Ben Horner
#Lab 10
#Math240
##############################################################################
##############################################################################
#Libraries
##############################################################################
library(ggplot2)
library(tidyverse)
library(patchwork)
?rbinom
##############################################################################
#Task 1: Basic Simulation
##############################################################################
true.p = 0.39
#generate 10k polls
n = 1004
rbinom = (n, 10000, true.p)
##############################################################################
#Task 1: Basic Simulation
##############################################################################
true.p = 0.39
#generate 10k polls
sample.size = 1004
rbinom = (sample.size, 10000, true.p)
#generate 10k polls
n = 1004
rbinom = (n = sample.size, 10000, true.p)
##############################################################################
#Ben Horner
#Lab 10
#Math240
##############################################################################
##############################################################################
#Libraries
##############################################################################
library(ggplot2)
library(tidyverse)
library(patchwork)
##############################################################################
#Task 1: Basic Simulation
##############################################################################
true.p = 0.39
#generate 10k polls
n = 1004
#generate 10k polls
sample.size = 1004
rbinom = (sample.size, 10000, true.p)
#generate 10k polls
sample.size = 1004
basic.simulation = rbinom(sample.size, 10000, true.p)
?tibble
?data.frame
sim.df = data.frame(id = 1:10000,
num.satisified = basic.simulation)
sim.df = data.frame(id = 1:1004,
num.satisified = basic.simulation)
View(sim.df)
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 0.001, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
sim.df = data.frame(id = 1:1004,
num.satisified = basic.simulation)
basic.simulation = rbinom(sample.size, 10000, true.p)
sim.df = data.frame(id = 1:1004,
num.satisified = basic.simulation)
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 0.001, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
#generate 10k polls
sample.size = 1004
basic.simulation = rbinom(sample.size, 10000, true.p)
sim.df = data.frame(id = 1:1004,
num.satisified = basic.simulation)
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 0.001, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
basic.simulation = rbinom(sample.size, 10000, true.p)
sim.df = data.frame(id = 1:1004,
num.satisified = basic.simulation)
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 1, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 2, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 4, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
?rep
.39*1004
##############################################################################
#Task 2: Resampling
##############################################################################
num.satisfied = round(0.39*1004)
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
num.satisfied = round(0.39*1004)
num.disatisfied = round(0.61*1004)
Gallup.data = c(rep(1, num.satisfied), rep(0, num.disatisfied))
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
satisfied = round(0.39*1004)
disatisfied = round(0.61*1004)
Gallup.data = c(rep(1, satisfied), rep(0, disatisfied))
resample <- sample(x = 1:samp.size,
size = samp.size,
replace = T)
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
samp.size = 1004
satisfied = round(0.39*samp.size)
disatisfied = round(0.61*samp.size)
Gallup.data = c(rep(1, satisfied), rep(0, disatisfied))
resample <- sample(x = 1:samp.size,
size = samp.size,
replace = T)
R <- 1000
resamples <- tibble(num.people = numeric(R))
R = samp.size
resamples <- tibble(num.people = numeric(R))
R <- 1000
resamples <- tibble(num.people = numeric(R))
?count
count(Gallup.data, 1)
count(Gallup.data)
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
samp.size = 1004
satisfied = round(0.39*samp.size)
disatisfied = round(0.61*samp.size)
Gallup.df = data.frame(people = 1:samp.size, satisfied = c(rep(1, satisfied), rep(0, disatisfied)))
View(Gallup.df)
count(Gallup.data)
Gallup.df |>
count(satisfied)
Gallup.df |>
tally(satisfied)
Gallup.df |>
tally = tally(satisfied)
tally.satisfied = tally(Gallup.df, satisfied)
View(tally.satisfied)
tally.satisfied[1]
tally.satisfied[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.data$satisfied,
size = nrow(Gallup.data),
replace = T)
# compute the stat on the resample
resamples$satisfied[i] <- tally(curr.resample, x)[1, 1]
}
View(Gallup.df)
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
samp.size = 1004
satisfied = round(0.39*samp.size)
disatisfied = round(0.61*samp.size)
Gallup.df = data.frame(people = 1:samp.size, satisfied = c(rep(1, satisfied), rep(0, disatisfied)))
tally.satisfied = tally(Gallup.df, satisfied)
tally.satisfied[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.data$satisfied,
size = nrow(Gallup.data),
replace = T)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
}
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.data),
replace = T)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
}
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
samp.size = 1004
satisfied = round(0.39*samp.size)
disatisfied = round(0.61*samp.size)
Gallup.df = data.frame(people = 1:samp.size, satisfied = c(rep(1, satisfied), rep(0, disatisfied)))
tally.satisfied = tally(Gallup.df, satisfied)
tally.satisfied[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df,
replace = T)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df,
replace = T) |>
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
}
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
}
#TESTING#
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
# compute the stat on the resample
tally(curr.resample)[1, 1]
#TESTING#
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
# compute the stat on the resample
tally(curr.resample)[1, 1]
# compute the stat on the resample
tally(curr.resample, x)[1, 1]
(curr.resample)
#TESTING#
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
tally(curr.df, x)[1, 1]
# compute the stat on the resample
tally(curr.df, satisfied)[1, 1]
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.resample, x)[1, 1]
}
#TESTING#
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
num.satisfied = tally(curr.df, satisfied)[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
View(resamples)
resamples$num.satisfied[1] <- num.satisfied
View(resamples)
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.df, satisfied)[1, 1]
}
View(resamples)
resampling.plot = ggplot(resamples, aes(x = satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified per 1000 people",
y = "Density")
resampling.plot
View(resamples)
resampling.plot = ggplot(resamples, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified per 1000 people",
y = "Density")
resampling.plot
##############################################################################
#Task 2: Resampling
##############################################################################
#Recreating Gallup data
samp.size = 1004
satisfied = round(0.39*samp.size)
disatisfied = round(0.61*samp.size)
Gallup.df = data.frame(people = 1:samp.size, satisfied = c(rep(1, satisfied), rep(0, disatisfied)))
tally.satisfied = tally(Gallup.df, satisfied)
tally.satisfied[1, 1]
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.df, satisfied)[1, 1]
}
resampling.plot = ggplot(resamples, aes(x = num.satisified)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified per 1000 people",
y = "Density")
resampling.plot
View(resamples)
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
resamples$num.satisfied[i] <- tally(curr.df, satisfied)[1, 1]
}
resampling.plot = ggplot(resamples, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified per 1000 people",
y = "Density")
resampling.plot
#Resampling
R <- 1000 #Number of resamples
resamples <- tibble(num.satisfied = numeric(R))
for( i in 1:R){
# Take a resample
curr.resample <- sample(x = Gallup.df$satisfied,
size = nrow(Gallup.df),
replace = T)
curr.df = data.frame(people = 1:nrow(Gallup.df), satisfied = curr.resample)
# compute the stat on the resample
resamples$num.satisfied[i] <- (tally(curr.df, satisfied)[1, 1])/1004
}
resampling.plot = ggplot(resamples, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified percentage of people",
y = "Density")
resampling.plot
resampling.plot = ggplot(resamples, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = .05, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified percentage of people",
y = "Density")
resampling.plot
resampling.plot = ggplot(resamples, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = .01, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Resampled Num Satisified", #titles and axis labels
x = "Satisified percentage of people",
y = "Density")
resampling.plot
##############################################################################
#Task 1: Basic Simulation
##############################################################################
true.p = 0.39
#generate 10k polls
sample.size = 1004
basic.simulation = rbinom(sample.size, 10000, true.p)
sim.df = data.frame(id = 1:1004,
num.satisfied = basic.simulation)
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 10, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
basic.simulation.plot = ggplot(sim.df, aes(x = num.satisfied)) + #assigns the data as the data frame and aes = x axis
geom_histogram(aes(y=after_stat(density)), binwidth = 15, fill = "lightblue", color = "black") + #makes histogram
labs(title = "Simulated Num Satisified", #titles and axis labels
x = "Satisified per 10000 people",
y = "Density")
basic.simulation.plot
lower_bound <- quantile(sim.df$num.satisfied, 0.025)
upper_bound <- quantile(sim.df$num.satisfied, 0.975)
lower_bound <- quantile(resamples$num.satisfied, 0.025)
upper_bound <- quantile(resamples$num.satisfied, 0.975)
range.middle.95 = upper_bound - lower_bound
print(range.middle.95)
lower_bound
lower_bound[1]
lower_bound[1, 1]
lower_bound[, 1]
lower_bound[1]
lower_bound[2]
?quantile
cat("Range of the middle 95%: [", lower_bound, ",", upper_bound, "]\n")
range.middle.95 = upper_bound - lower_bound
margin.error = range.middle.95/2
n = c(100:3000:10)
##############################################################################
#Task 3: Simulation over n and p
##############################################################################
2900/10
n = c(100:290:10)
##############################################################################
#Task 3: Simulation over n and p
##############################################################################
n = c()
for(i in (1:290)){
num = i*10 + 100
n = append(n, num)
}
.99-.01
p = c()
for(i in (0:99)){
num = i*.01
p = append(p, num)
}
?num_range
n =100
p = 0.5
sim = rbinom(n, 10000, p)
sim
